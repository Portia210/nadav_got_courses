0) הקדמה
מה זה ענן?
מחשב של מישהו אחר או שרת בשפה המקצועית
שרתים הם בדיוק כמו מחשבים, רק עוצמתיים הרבה יותר, ובדרך כלל הם בחוות
החווה יכולה להיות בכל מקום בעולם, אך היא תמיד פעילה ואתם תמיד יכולים לגשת אליה אם יש לכם חיבור אינטרנט

טכנולוגיות ענן מאפשרים לנו לשים את התוכנה שלנו בענן ומשתמשים יכולים לגשת אליה משם בלי שהתוכנה תצטרך לרוץ על המחשב שלנו כל הזמן

הצד שלנו נקרא FRONT END/ CLIENT SIDE
צד השרת נקרא BACK END/ SERVER SIDE

אנחנו יותר מתעסקים בBACK END, הוא הצד היותר מעניין 
מה זה אומר SCALE
נגיד שפעם היינו צריכים שרת אחד, והתרחבנו, עכשיו אנחנו צריכים 100 שרתים
היכולת הזו לגדול נקראת SCALE, והיא מתרחשת באמצעות טכנולוגיות ענן

ייתרון נוסף הוא אמינות, אם אני עובד עם מחשב אחד או שרת אחד יכול להיות תקלה והקוד ייפול, בחוות שרתים זה לא יקרה

ספקיות ענן:
1. AWS, אמזון AMAZON WEB SERVIESES 
2. MICROSOFT באמצעות AZURE
3. GCP גוגל GOOGLE CLOUD

כולם משתמשים באחת משלושת החברות הללו, אנחנו נתמקד בעיקר בAWS

1) הקמת חשבון
2) הגדרת תקציב לחשבון
3) מכונה וירטואלית
מכונה וירטואלית = מחשב VIRTUAL MACHINE
מה הוא שונה ממחשב רגיל
במחשב רגיל יש יחידה אחת של מעבד, זיכרון ...
במכונה וירטואלית יש מנהל מכונות (HYPER VISER) שהוא יודע לצרוך קצת מכל רכיב ובעצם הוא מריץ כמה מערכות הפעלה על מכונה אחת
כל מכונה מדמיינת שהיא מחשב רגיל, ולכן אנחנו יכולים להתקין על כל מכונה כזו איזו מערכת הפעלה שאנחנו רוצים
בגלל שתת המחשבים לא באמת קיימים הם נקראים וירטואליים, אנחנו קוראים להם וירטואליים
מנהל המערכות הוא בעצם מנהל שכבה אבסטרקטית, כי אנחנו לא רואים את המחשבים האלה בפועל, רק מנהלים אותם מרחוק

כשאני בא אם המחשב שלי לשרת, הם יתנו לי בעצם חתיכה קטנה ממנו כי זה לא הגיוני להקצות לי את כל השרת בשביל איזו פעולה בסיסית
מה שכן זה יאפשר לי להיות מופרד לגמרי מVM אחר שעל השרת
דבר נוסף שזה יאפשר לנו זה להרחיב את הקוד שלנו יחסית בקלות
אנחנו מבינים את החשיבות של האבסטרקציה, כיוון שהיא מאפשרת לנו להריץ את הקוד שלנו על כל שרת בחוות השרתים
לכן אומרים שהענן הוא אבסטרקטי (חסר צורה)
יש כאלה שמלמדים להקים מכונה וירטואלית על המחשב
אני לא מוצא בזה טעם, אבל אם כן יש 2 אופציות VIRTUALBOX, DOCKER, VMWARE

4) הקמת EC2
קיצור של ELASTIC COMPUTER


5) לינוקס 
מה היתרונות בלינוקס
פשוטה, פחות תקלות
יכולה לרוץ על הרבה סוגים של חומרה, כמעט על כל חומרה
למשל וינדוס לא יכולה לרוץ על כל חומרה
מבוססת קוד פתוח, תרומה ציבורית, ולכן אנשים שאוהבים את זה פותרים בעיות
ללינוקס יש הרבה הוצאות (DISTRIBUTIONS) ולכל גירסא יש את היכולות שלה
UBUNTU CENTOS REDHAT
אנחנו נתמקד בUBUNTU, הוא הכי נפוץ
נתמקד בממשק CLI

ubuntu@ip-172-31-6-204:~$ whoami
ubuntu
ubuntu@ip-172-31-6-204:~$ hostname
ip-172-31-6-204
ubuntu@ip-172-31-6-204:~$ date
Tue May  6 17:15:07 UTC 2025
ubuntu@ip-172-31-6-204:~$ clear .^C
ubuntu@ip-172-31-6-204:~$ pwd
/home/ubuntu
cd ~, will take you to home

7) לטייל במערכת קבצים
8) עבודה עם קבצים
cat (catalog) היא פקודה לקריאת קבצים קטנים

less היא פקודה יותר רצינית לקריאת קבצים
איך מחפשים מילה בתוך קובץ
לאחר שנכנסנו לקובץ עם less
עושים /search_word
כדי לצאת מזה Esc , then q

איך ליצור קובץ טקסט
vi (shorthand for vim) {file_name}
זה  יפתח לנו את הקובץ לקריאה
אפשר לצאת מהקובץ באותה דרך שיוצאים מless
כדי לשמור ולצאת עושים :, ואז wq (write quit) ולוחצים  enter
אפשר לפתוח גם קובץ קיים לקריאה באותה דרך
טריק לצאת מהר מעריכת קובץ, SHIFT +ZZ

סתם לייצר קובץ ניתן לעשות באמצעות הפקודה touch

9) חיפוש בקובץ טקסט
נניח שאנחנו בקובץ לוג
איך אני יכול לסנן רק שורות שיש בהן ERROR

grep "ERROR" /file_path_to_search
ואני אקבל רק את השורות שזה מופיע עליהם

יש ללינוקס תכונה שאנחנו יכולים לקחת תוצאה של פקודה אחת ולהעביר אותה לפקודה אחרת, ממש כמו להאכיל פונקציה בפונקציה אחרת
ולכן אנחנו יכולים לעשות
grep "ERROR" /file_path_to_search | less
אפשר לקחת את זה עוד קדימה
grep "ERROR" /file_path_to_search | grep "another" | less

בלינוקס ניתן לתת כל פקודה עם --help
או ניתן לעשות man (manual) command name
לפי זה ניתן לעשות
grep -i "searched" (ואז הוא יתעלם מאותיות גדולות קטנות)

איך אפשר להעביר תוצאה לקובץ חדש
result > filename
איך לספור שורות wc -l

10) פעולות על קצבים
cp (copy) /file_source /new_destination
אפשר גם לעשות
cp /file_souce ./ will copy to the current folder

mv לשנות שם, או להעביר

rm מחיקה
ניתן להוסיף -f לכפות עליו למחוק בלי לשאול שאלות

11) פעולות על תיקיות
יציאת תיקייה mkdir
כדי למחוק תיקייה rm -r 
בעצם במחיקת תיקייה צריך למחוק כל קובץ פנימי שנמצא בה או בתיקיות פנימיות, -r  = recursive
כנל בהעתקת או העברת תיקייה


12) מעקב אחרי פרוססים
top הפרוססים הכי צורכים, יציאה באמצעות q
ps (process) - הפרוססים שרצים עבורי
ps aux - כל הפרוססים שרצים
kill {pid}
how to find my id?
echo $$
כשהורגים פרוסס, יש כמה אופציות (סיגנלים) 1. תחכה .2) תמות אלא אם כן קרה משו
אפשר למצוא את הרישמה המלאה על ידי חיפוש list of kill signal
להרוג באופן קשוח kill -9

13) הרשאות וניהול משתמשים
מי יכול לעשות מה? סיווג לפי משתמש, מפתח, מנהל
בלינוקס מנהל = root, ולפעמים superuser, ובקיצור su, מוסיפים את המילה do ויוצא sudo
משתמש = שם המשתמש
כשעושים ls -l אפשר לראוצת מי הבעלים של המנהל
לפעמים תקפוץ לנו premission denied, וsudo יפתור את זה

אפשר גם להחליף את המשתמש במנהל, sudo -i, ואז אני נשאר מנהל
חייבים להיות זהיר עם זה, ולפעמים צריך סיסמה כדי לתת פקודה בsudo
כדי לחזור להיות משתמש אפשר לעשות exit


14) הורדת חבילות בלינוקס
apt-get install {package name}
example apt-get inseall sl
עם הרשאות מנהל.
עכשיו אפשר להשתמש בפקודה sl
כדי להסיר, במקום install, remove
עדכון חבילה:
sudo apt-get update

15) התחברות מרחוק
עד עכשיו עבדנו דרך של אמזון
איך עובדים בצורה יותר מקצועית? שהטרמינל של אמזון ירוץ על המחשב שלנו
אנו נעשה את זה עם SSH, SECURE SELL TERMINAL, שהוא בעצם פרוטוקול תקשורת מאובטח לטרמינל
כדי לעשות את זה נצטרך את הIP של המכונה, נצטרך לקחת מהאתר של אמזון, public ip v4
יש גם private ip, שהוא לשימוש פנימי בתוך הענן
הדבר השני שאנחנו צריכים כדי להתחבר דרך SSH הוא קובץ pem, שמתקבל כשיוצאים instance חדש
כדי להתחבר לטרמינל מרחוק
ssh -i <path to pem key> <username>@<public id> 
try to kill one terminal from another window
to disconnect
exit
or ctrl +B
to see how many people connected 
who

16) העברת קבצים מהשרת ואליו
פרוטוקול scp secure copy
scp -i <path to pem> <input> username@[ip]:<output>

how to pull i file from the ec2

the oposite, just replace the source and the dest
scp -i <path to pem> username@[ip]:<input on ec2> <output on our machine>

נקודות: הוא מניח שאנחנו מתחילים מהמשתמש שלנו בלינוקס

17) העברת קבצים באמצעות FILEZILLA
פותחים את התוכנה
file > sites manager
בוחרים SSH
וכניסה עם קובץ מפתח , בוחרים קובץ pem
כאשר ההתחברות התרחשה פשוט אפשר לגרור קבצים

שיעור 18) הפניית פלט
טריק: כדי לחפש פקודות ctrl + r, ואז אפשר לחפש פקודות בהסטוריה
נגיד נתנו את פקודה date
בואו נאמר שאנחנו רוצים להפנות את התוצאה שקיבלנו במקום שהיא תודפס על המחשב, למקום אחר
כדי לשמור בקובץ משתמשים בסימן <
אפשר למשל לתת פקודה cat txt.txt > output

ללינוקס יש 2 ערוצי output
1. standart output stdout
2. standart error stderr
3. status מחזיר מספר שאומר אם הכל בסדר אם הוא 0, ואם הוא שונה מ0 יש בעיה מסויימת
למסך תמיד מגיעים שניהם
לכן עם נעשה date > txt.txt זה יעבוד, כי הוא מפנה את הסטנדרט אאוטפוט לקובץ
אבל אם נעשה blablabla >txt.txt הוא ידפיס את השגיאה על המסך ולא לתוך הקובץ

אפשר לבקש מלינוקס להפנות ארורים לתוך קובץ
blablabla 2>txt.txt
כדי להוציא את שניהם אפשר לעשות
blablabla > txt.txt 2 > error.txt
אפשר לתת את הפקודה echo $? כדי לראות את הסטטוס האחרון

19) הרצת פקודות מרחוק עם פייתון
נניח אני רוצה קובץ במחשב שלי שמראה מה קורה בשרת
כדי לעשות את זה צריך להתקין חבילת פייתון פרמיקו
paramiko
דוגמא נמצאת בשיעור

20) חתימת זמן
מספר השניות מ1.1.1970 עד היום
קוראים לזה בריאת העולם של UNIX, שהיא האב הקדמון של LINUX
אם נעשה date +%s
נקבל את מספר השניות שעברו מאותו זמן
אפשר להמיר את זה גם לתאריך אונליין unix epoch time to text
כדי לקבל את הזמן הזה באמצעות פייתון ניתן לקבל int(time.time()), 

21) איך להריץ קוד פייתון ממש על המכונה שיכול לעשות משהו
איך מריצים את הקוד ממש על המכונה המרוחקת
אנחנו נצטרך להשתמש בsubprocess
כי בעצם הקוד פייתון שלנו עומד להריץ פקודות בBASH

קודם מעתיקים את הקובץ שלנו למכונה
ubuntu@ip-172-31-6-204:~$ vi run_local_command.py
ubuntu@ip-172-31-6-204:~$ python3 run_local_command.py 
total 4
-rw-rw-r-- 1 ubuntu ubuntu 500 May  8 18:35 run_local_command.py
-rw-r--r-- 1 ubuntu ubuntu   0 May  8 16:49 vs_text.txt

בואו ניצור סקריפט שמריץ סקריפט אחר של פייתון ומביא לנו את התוצאה
אפשר להשתמש במה שעשינו בשיעור הקודם כדי לבצע את זה


22) פרוייקט סיום:
error, warning



23) Bash scripting
echo = python print
example : echo "hello linux"


32) DOCKER 
דוקר היא טכנולוגיה שמאפשר ליצור מכונה וירטואלית רזה
דוקר הוא קונטיינר (עיגון)

33) מה זה דוקר
נגיד שאנחנו צריכים להשתמש במודול מסויים למשל פנדס
יש רשימת דרישות
1. python
2. pip
3. pandas
אם אני רוצה שחבר שלי יריץ את הקוד, אני צריך לשלוח לו את רשימת הדרישות
וזה יכול להסתבך עוד הרבה יותר
נניח שהתוכנה שלי יכולה לרוץ רק על לינוקס, זה נהיה בעייתי
דוקר מאפשר לנו לארוז את רשימת הדרישות שלנו במלבן שנקרא דוקר, והוא פשוט יכול להתקין את המלבן הזה ולהשתמש בתוכנה
וזה בעצם עושה סדר
אני יכול להגיד לקונטיינר לרוץ עם גירסא מסויימת של לינוקס
והדוקר יכול לעשות את ההתאמה ולרוץ גם על מערכת הפעלה שונה
התהליך של להפוך משהו לקונטיינר נקרא קונטינריזציה
להפוך למכונה וירטואלית ויראוליזציה
רשימת הדרישות נקראית דפנדסייס

מה ההבדלים בין קונטיינר למכונה וירטואלית
במכונה ויטואלית בעצם יש: 
1. חומרה, 
2. מערכת בפעלה, 
3. מעליו HYPERVISOR שמחלק אותה לכמה מערכות שונות, 
4. ובתוך אחת המערכות הללו יושב הקוד שלי וכל רשימת הדרישות וכך הוא יכול לרוץ

במכונה ויטואלית בעצם יש: 
1. חומרה, 
2. מערכת הפעלה
3. מנוע דוקר
4. הקוד עם הדרישות 

דוקר בעצם צורך פחות משאבים, כי הוא לא צריך לבזבז משאבים להקים מערכת הפעלה שלמה

כשעובדים עם VM הKERNEL הוא מערכת ההפעלה הוירטואלית
בדוקר קונטיינר, מי שמנהל את הכל הוא מערכת ההפעלה של המחשב המארח

יש פה בעצם של שאלה של ביצועים ביצועים יותר טובים בקונטיינר, לבין הפרדה מלאה בVM

34) התקנת דוקר

35) הקונטיינר הראשון שלי
אנחנו רציץ קונטיינר ארוז על המחשב שלנו
האריזה של הדוקר נראת IMAGE
כאשר זה מותקן זה נקרא CONTAINER

אפשר להוריד IMAGES מוכנים מDOCKER HUB

לראות images
docker images

למחוק
docker rmi <imageID>

tAG = version
to download specific version
we can scroll add see the version and install them with :

docker ps will show the running dockers
with -a will show the not running ones
לא ניתן למחוק IMAGE כאשר הקונטיינר שמשתמש בה רץ
הקונטיינר רץ בפורט שכתוב ליד בדף הקונטיינרים
מריצים ללא פורט כך 
docker run -P -d nginxdemos/hello (-d גורם לכך שהוא רץ ברקע בלי להפריע לנו (detached))
הקונבציה היא לקבע לו פורט מסויים כך
docker run -p 8080:80 -d nginxdemos/hello
שם מוספים כך 
docker run -p 8080:80 -d --name "my server" nginxdemos/hello

local host - שרת מארח מקומי
כתובת IP שלו היא
127.0.0.1

🐳 Docker Image Commands
Command	Description	Common Options
docker build .	Build image from Dockerfile in current directory	-t <name:tag> (tag the image)
docker images	List all images	-a (show all images including intermediate)
docker rmi <image>	Remove an image	-f (force removal)
docker pull <image>	Download image from Docker Hub	
docker push <image>	Upload image to Docker Hub	

🧱 Docker Container Commands
Command	Description	Common Options
docker run <image>	Run a container from an image	-d (detached), -it (interactive + terminal), --name <name>, -p <host:container> (port mapping), -v <host:container> (volume)
docker ps	List running containers	-a (show all containers)
docker stop <container>	Stop a running container	
docker start <container>	Start an existing container	
docker restart <container>	Restart a container	
docker rm <container>	Remove a container	-f (force stop and remove)

🧭 Other Useful Commands
Command	Description	Common Options
docker exec <container> <command>	Run a command inside a running container	-it (interactive shell)
docker logs <container>	View logs of a container	-f (follow logs), --tail <n> (show last n lines)
docker network ls	List networks	
docker volume ls	List volumes	
`docker inspect <name	id>`	Show detailed info (container/image/network/volume)

38) פורטים
כתובת IP דוגמא
127.0.0.1:8080 
הסוף זה הפורט
פורטים הם כמו דלת והבניין הוא כתובת הIP 
הדבר הזה פוגש אותנו בשורה הזו
app.run(host='127.0.0.1', port=5000)
הכתובת הזו היא מוסכמה מהו LOCAL HOST

מה זה אומר בהקשר של דוקר
app.run(host='127.0.0.1', port=5000)
השורה הזו רצה נפלא כשמריצים את הקוד כרגיל
כשמריצים את הקוד בתוך קונטיינר, אותה כתובת בעצם רצה בתוך הקונטיינר, שמנוע הדוקר מריץ, 
יש 2 בעיות, הדוקר עצמו יכול להחליט שהוא נותן כתובת IP אחרת
כנל הפורט של הדוקר יכול להיות פורט שונה

הדרך לפתור את זה הוא לומר
app.run(host='0.0.0.0', port=5000)
כך בעצם הדוקר מקשיב לכל הIP
לגבי פורט יש דרך לבדוק שאותו פורט יהיה בשימוש
בDOCKERFILE רושמים EXPOSE <port>
and later
docker run -p <computer-port>:<container-port>

42)
docker restart to restart
העתקת קבצים מדוקר docker cp
first
docker ps, to see the id
then docker cp <docker-name>:/path <output-path>

to give commands inside the docker
docker exec <id> <command>
or
docer exec (execute) -it (interactive) <id> /bin/bash

to install vi for example 
apt-get update (to allwow downlaods)
then
apt-get install vi
then we can use vi

ctrl +d , or exit to exit
43) docker in the cloud
ctrl + r to search for ssh
check docker --version if exit
look for script to install docker on your ec2 machine

this should do
#!/bin/bash

sudo apt-get update -y
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

run the script on you machine
chmod +x script.sh

sometimes the script will not run becuase linux has dirrerent setting
so we need to change in the setting EOL (end of line) conversion to LF (UNIX)

to convert windows script to unix
dostounix script.sh


45)
to upload image
docker images
docker save -o flask_app.tar flask_app
move the image with scp -i <pem-key> ... to the ec2
conneect to ec2 with ssh -i ...
load the image with sudo docker load --input
see the image with sudo docker images
the docker run

46) view the container in EC2
after the container is running
curl <url with port of the conatiner> (c-url)
if exactly like we run in the the browser

how to get there with the browser?
get into aws console, to your instance
use the public v4url
copy and go in with your port 
it shouldn't work because there are ec2 security that will not allow to view it from the outside
inbound rules
add there another rule
custom TCP, with 0.0.0.0 and your port number
then we should be able to access it